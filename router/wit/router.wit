package component: router;

interface router-api {
  enum action {
    follow,
    unfollow
  }

  enum query-type {
    user-profile,
    user-followers,
    user-following,
    user-tweets,
    tweet-data,
    user-timeline,
    //     add-worker,
    //     remove-worker,
    //     distribute-load,
  }

  record user-profile {
    user-id: string,
    username: string,
    followers: list<string>,
    following: list<string>,
  }

  record tweet-data {
    user-id: string,
    tweets: list<string>,
  }

  record timeline-data {
    tweet-id: string,
    user-id: string,
  }

  variant router-response {
    user-profile-response(user-profile),
    user-followers-response(list<string>),
    user-following-response(list<string>),
    user-tweets-response(tweet-data),
    user-timeline-response(list<timeline-data>),
    failure(string),
  }

  // Notify about new tweets, handling the distribution to timeline management components
  notify-new-tweet: func(tweet-id: string, user-id: string, followers: list<string>) -> result<bool>; // success

  // Inform about user follow/unfollow actions, managing updates to timelines
  inform-follow-change: func(user-id: string, target-user-id: string, action: action) -> result<bool>; // success

  // Route queries to appropriate workers based on consistent hashing or other criteria
  route-query: func(query-type: query-type, key: string, data: string) -> router-response; // response
}

world router {
  import component: user-management-stub/stub-user-management;
  import component: tweet-management-stub/stub-tweet-management;
  import component: timeline-management-stub/stub-timeline-management;

  export router-api;
}
