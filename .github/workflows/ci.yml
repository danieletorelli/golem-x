name: CI

on:
  push:
    tags: [ 'v*.*.*' ]
    branches: [ '**' ]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            /usr/local/bin/golem-cli
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-is
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-component
        run: cargo binstall --no-confirm cargo-component
      - name: Install cargo-make
        run: cargo binstall --no-confirm cargo-make
      - name: Install protobuf
        uses: arduino/setup-protoc@v3
      - name: Install golem-cli
        run: |
          if ! command -v golem-cli &> /dev/null
          then
            curl -Ssf -L -o golem-cli https://github.com/golemcloud/golem/releases/latest/download/golem-cli-x86_64-unknown-linux-gnu &&
            chmod +x golem-cli &&
            sudo mv golem-cli /usr/local/bin/
          else echo "golem-cli is already installed"
          fi
      - name: Generate stubs
        run: |
          golem-cli stubgen initialize-workspace --targets user-management --targets tweet-management --targets timeline-management --callers router
          sed -i 's/wasm32-wasi/wasm32-wasip1/g' Makefile.toml
          cargo make regenerate-stubs
      - name: Compile
        run: cargo make release-build-flow
      - name: Test
        run: cargo test --all
      - name: Clippy
        run: cargo clippy -- -Dwarnings
      - name: Save components
        uses: actions/upload-artifact@v4
        with:
          path: target/wasm32-wasip1/release/*.wasm
          name: components

  functional-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            /usr/local/bin/golem-cli
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-is
      - name: Create golem profile
        run: golem-cli profile add -s golem --component-url=http://localhost:9881/
      - name: Setup containers
        run: docker compose --env-file docker.env up -d
      - name: Load components
        run: SKIP_BUILD=1 ./update_components.sh
      - name: Load users
        run: |
          source ./api_calls.sh

          USER_0=$(create_user "Daniele")
          USER_1=$(create_user "John")
          EXPECTED_SUCCESS='{"message":"Success","status":200}'
          
          compare_json "$USER_0" "$EXPECTED_SUCCESS"
          compare_json "$USER_1" "$EXPECTED_SUCCESS"
      - name: Get user profiles
        run: |
          source ./api_calls.sh

          USER_0=$(get_profile 0)
          EXPECTED_0='{"status":200,"user":{"user-id":0,"username":"Daniele","followers":[],"following":[]}}'

          USER_1=$(get_profile 1)
          EXPECTED_1='{"status":200,"user":{"user-id":1,"username":"John","followers":[],"following":[]}}'

          compare_json "$USER_0" "$EXPECTED_0"
          compare_json "$USER_1" "$EXPECTED_1"